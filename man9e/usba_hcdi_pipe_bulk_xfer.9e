.\"
.\" This file and its contents are supplied under the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.illumos.org/license/CDDL.
.\"
.\"
.\" Copyright 2016 Joyent, Inc.
.\"
.Dd Dec 22, 2016
.Dt USBA_HCDI_PIPE_BULK_XFER 9E
.Os
.Sh NAME
.Nm usba_hcdi_pipe_bulk_xfer
.Nd perform a USB bulk transfer
.Sh SYNOPSIS
.In sys/usb/usba/hcdi.h
.Ft int
.Fo prefix_hcdi_pipe_bulk_xfer
.Fa "usba_pipe_handle_data_t *ph"
.Fa "usb_bulk_req_t *ubrp"
.Fa "usb_flags_t usb_flags"
.Fc
.Sh INTERFACE LEVEL
.Sy Volatile -
illumos USB HCD private entry point
.Pp
This is a private function that is not part of the stable DDI. It may be
removed or changed at any time.
.Sh PARAMETERS
.Bl -tag -width Fa
.It Fa ph
A pointer to a USB pipe handle as defined in
.Xr usba_pipe_handle_data 9S .
.It Fa ubrp
A pointer to a USB bulk transfer request. The structure's members are
documented in
.Xr usb_bulk_req 9S .
.It Fa usb_flags
Flags which describe how allocations should be performed. Valid flags
are:
.Bl -tag -width Sy
.It Sy USB_FLAGS_NOSLEEP
Do not block waiting for memory. If memory is not available the
allocation will fail.
.It Sy USB_FLAGS_SLEEP
Perform a blocking allocation. If memory is not available, the function
will wait until memory is made available.
.Pp
Note, the request may still fail even if
.Sy USB_FLAGS_SLEEP
is specified.
.El
.El
.Sh DESCRIPTION
The
.Fn usba_hcdi_pipe_bulk_xfer
entry point is used to initiate an
.Em asynchronous
USB bulk transfer on the pipe
.Fa ph .
The specific USB bulk transfer is provided in
.Fa ubrp .
For more background on transfer types, see
.Xr usba_hcdi 9E .
.Pp
The host controller driver should first check the USB address of the
pipe handle. It may correspond to the root hub. If it does, the driver
should return
.Sy USB_NOT_SUPPORTED .
.Pp
Bulk transfers may send data to the device or receive data from the
device. A given bulk endpoint is uni-directional. The direction can be
determined from the endpoint address based on the
.Sy p_ep
member of
.Fa ubrp .
See
.Xr usb_ep_descr 9S
for more information on how to determine the direction of the endpoint.
.Pp
The device driver should allocate memory, whether DMA memory or
otherwise, to perform the transfer. For all memory allocated, it should
honor the values in
.Fa usb_flags
to determine whether or not it should block for allocations.
.Pp
The length of the bulk transfer and its data can be found in the
.Sy bulk_len
and
.Sy bulk_data
members of
.Fa ubrp
respectively. The
.Xr mblk 9S
structure should not be used directly in the I/O transfer. Data should
be copied to or from the data buffer that will go the controller.
.Pp
If the driver successfully schedules the I/O, then it should return
.Sy USB_SUCCESS .
When the I/O completes, it must call
.Xr usba_hcdi_cb 9F
with
.Fa ubrp .
If the transfer fails, but the driver returned
.Sy USB_SUCCESS ,
it still must call
.Xr usba_hcdi_cb 9F
and should specify an error there.
.Pp
It is the driver's responsibility to time out bulk transfer
requests. If the timeout in the request, as indicated in the
.Sy bulk_timeout
member of
.Fa ubrp
is set to zero, then the driver should use the USBA default timeout of
.Sy HCDI_DEFAULT_TIMEOUT .
All timeout values are in
.Em seconds .
.Ss Callback Handling
When the bulk transfer completes the driver should consider the
following items to determine what actions it should take on the
callback:
.Bl -bullet
.It
If the transfer timed out, it should remove the transfer from the
outstanding list, queue the next transfer, and return the transfer back
to the OS with the error code
.Sy USB_CR_TIMEOUT
with
.Xr usba_hcdi_cb 9F .
.It
If the transfer failed, it should find the appropriate error and call
.Xr usba_hcdi_cb 9F
with that error.
.It
If the transfer succeeded, but less data was transfered than expected,
consult the
.Sy bulk_attributes
member of the
.Fa ubrp .
If the
.Sy USB_ATTRS_SHORT_XFER_OK
flag is not present, then the driver should call
.Xr usba_hcdi_cb 9F
with the error
.Sy USB_CR_DATA_UNDERRUN .
.It
If the transfer was going to the host, then the driver should copy the
data into the transfer's message block and update the
.Sy b_wptr
member of the
.Xr mblk 9S .
.It
If everything was successful, call
.Xr usba_hcdi_cb 9F
with the code
.Sy USB_CR_OK .
.El
.Sh RETURN VALUES
Upon successful completion, the
.Fn usba_hcdi_pipe_bulk_xfer
function should return
.Sy USB_SUCCESS .
Otherwise, it should return the appropriate USB error. If uncertain, use
.Sy USB FAILURE .
.Sh SEE ALSO
.Xr usba_hcdi 9E ,
.Xr usba_hcdi_cb 9F ,
.Xr mblk 9S ,
.Xr usb_bulk_req 9S ,
.Xr usb_ep_descr 9S ,
.Xr usba_pipe_handle_data 9S
